/* 
 * This file was created by YongLI Cheng 2014/3/16 \
 */ 
#include <iostream>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <arpa/inet.h>
#include <assert.h>
#include <pthread.h>
#define BACKLOG 10
#define PORT 3333
#define MAXSIZE 1024 * 1024 * 15
//#define MAXSIZE 1024*1024*sizeof(int)+6

static volatile int fd_master = -1;
int read_all(int fd, void *buf, int n);
int write_all(int fd, void *buf, int n);
int write_to_worker(char *ip, void *buf, int n);
/*
static void *reply(void *wc){
	int rval;
	int *li;
	int fd=(*(workercontrol*)wc).fd_master_client;
	int fd_server_master=(*(workercontrol*)wc).fd_master_server;
	char buf1[MAXSIZE+1];
	char Phead[6];
	char Pack_t[1];
	int offset=0;
	int nbyte;

	while(1){
		while((rval = read(fd, buf1, MAXSIZE)) <= 0) {
			//std::cout<<"reading stream error!"<<std::endl;
			//close(fd);
			//pthread_cancel(pthread_self());
		}
		nbyte=rval;
		li=(int*)(buf1+6);
		memcpy(Phead,buf1,5);
		if(strcmp(Phead,"XGREQ")!=0){
			std::cout<<"Bad Package Formationt|"<<Phead<<std::endl;
			continue;
		}

		Pack_t[0]=buf1[5];
		if(Pack_t[0]=='T'){
			std::cout<<"Aaaaa"<<Pack_t<<"|"<<Phead<<"|"<<li[0]<<"|"<<Pack_t[0]<<li[1]<<std::endl;

			char* msg = (char*)"XGACKT";
			if (send(fd, msg, strlen(msg), 0) == -1)
				std::cout<<"send error!"<<std::endl;
		}else if(Pack_t[0]=='B'){
			std::cout<<"Aaaaa"<<Pack_t<<"|"<<Phead<<"|"<<li[0]<<"|"<<Pack_t[0]<<li[1]<<std::endl;

			char* msg = (char*)"XGACKB";
			if (send(fd, msg, strlen(msg), 0) == -1)
				std::cout<<"send error!"<<std::endl;
		}else if(Pack_t[0]=='X'){
			int i;
			while(nbyte<MAXSIZE){
				offset+=rval;
				rval=read(fd, buf1+offset, MAXSIZE);
				nbyte+=rval;
				std::cout<<rval<<";;;;;;;;;;;;;;;;;;;;"<<std::endl;			
			}
			for(i=0;i<1024*1024;i++) {
				std::cout<<li[i]<<"|"<<std::endl;
			}
			//std::cout<<"Aaaaa"<<Pack_t<<"|"<<Phead<<"|"<<li[1048570]<<"|"<<i-1<<std::endl;
			char* msg = (char*)"Hello,Mr hqlong, you are connected!\n";
			if (send(fd, msg, strlen(msg), 0) == -1)
				std::cout<<"send error!"<<std::endl;
		}else if(Pack_t[0]=='S'){
			int c;
			int isFirst;
			task *T;

			memcpy(&c, buf1+6, sizeof(int));
			T = (task*)malloc(sizeof(task) * c);
                	for(int j = 0; j < c; j++){ 
				T[j]= *(task*)(buf1+6+sizeof(int)+j*sizeof(task));
				std::cout<<T[j].machine<<"==== " <<T[j].iter<<" "<<T[j].interval<<std::endl;
			}		
			char* msg = (char*)"XGACKS";
			if (send(fd, msg, strlen(msg), 0) == -1)
				std::cout<<"send back XGACKS fail!"<<std::endl;
			isFirst = T[0].interval;
			for(int i = 0; i < c; i ++) {
				sleep(14);
				if(isFirst != 0){ 
					read(fd, buf1, 6);
					memcpy(Phead,buf1,6);
				}
				sleep(2);
				isFirst = 1;
				send(fd, "XGREQU", 6, 0);//this interval have been updated
				std::cout<<"machine  "<<T[i].machine<<"inter  "<<T[i].iter<<"   interval:"<<T[i].interval<<std::endl;
			}
			
			send(fd, "XGREQF", 6, 0); // Tell xgMaster this machine have finished.
			std::cout<<"Finished..."<<std::endl;
			continue;
		}else{
			std::cout<<"Unkown Package Formation"<<std::endl;
			continue;
		}
	}
}
*/
	static void *server(void *info) {
		int sockfd, client_fd;
		int ret, len;
		char *buf1;
		char buf[1024 + 1];
		struct sockaddr_in my_addr;
		struct sockaddr_in remote_addr;

		if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
			std::cout<<"socket create failed!"<<std::endl;
		}
		assert(sockfd!=-1);

		my_addr.sin_family = AF_INET;
		my_addr.sin_port = htons(PORT);
		my_addr.sin_addr.s_addr = INADDR_ANY;
		bzero(&(my_addr.sin_zero), 8);
		if (bind(sockfd, (struct sockaddr*) &my_addr, sizeof(struct sockaddr))==-1){
			std::cout<<"bind error!"<<std::endl;
			assert(false);
		}

		if (listen(sockfd, BACKLOG) == -1) {
			std::cout<<"listen error!"<<std::endl;
			assert(false);
		}
		buf1 = (char*)malloc(MAXSIZE +1);
		int isFirst = 1;
		while (1) {
			socklen_t sin_size = sizeof(struct sockaddr_in);
			if ((client_fd = accept(sockfd, (struct sockaddr*) &remote_addr, &sin_size)) == -1) {
				std::cout<<"accept error!"<<std::endl;
				continue;
			}
			if(isFirst == 1) {//for xgMaster.
				isFirst = 0;
				std::cout<<"Received a connection from"<<inet_ntoa(remote_addr.sin_addr)<<std::endl;
				read(client_fd, buf, 1024);
            			char* msg = (char*)"XGACKT";
            			if (send(client_fd, msg, strlen(msg), 0) == -1)
                    			std::cout<<"send back XGACKS fail!"<<std::endl;
				fd_master = client_fd;
				continue;
			}

			/* todo for otherworker */

			std::cout<<"Received a connection from"<<inet_ntoa(remote_addr.sin_addr)<<client_fd<<std::endl;
			int nbyte = 0;
			int offset = 0;
			int rval;
			rval = read_all(client_fd, buf1, MAXSIZE);
			std::cout<<"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{"<<rval<<std::endl;
			send(client_fd,(char*)"XGACKT", 6, 0);
			if(client_fd > 0) close(client_fd);

			/*
                	pthread_t t;
                	int ret = pthread_create(&t, NULL, &reply, &wc);
			assert(ret>=0);
			*/
		}
	}

int connect_worker(char *ip) {
	int sockfd;
        struct sockaddr_in serv_addr;

        if (( sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
               std::cout<<"socket error!"<<std::endl;
               return(-1);
        }

        bzero(&serv_addr,sizeof(serv_addr));
        serv_addr.sin_family    = AF_INET;
        serv_addr.sin_port      = htons(PORT);
        serv_addr.sin_addr.s_addr= inet_addr(ip);

        if(connect(sockfd, (struct sockaddr *)&serv_addr,sizeof(struct sockaddr)) == -1) {
              std::cout<<"connect error!"<<std::endl;
              return(-1);
        }
	return(sockfd);
}

int read_all(int fd, void *buf, int n) {
	int nleft;
	int nbytes;
	char *ptr;
	ptr = (char*)buf;
	nleft = n;
	for(; nleft > 0;){
		nbytes = read(fd, ptr, nleft);
		if(nbytes < 0){
			if(errno == EINTR) nbytes = 0;
			else return(-1);
		} else if(nbytes == 0) break;
		nleft -= nbytes;
		ptr += nbytes;
	}
	return(n - nleft);
}

int write_all(int fd, void *buf, int n) {
	int nleft, nbytes;
	char *ptr;
	nleft = n;
	ptr = (char*)buf;
	for(; nleft > 0;){
		nbytes = write(fd, ptr, nleft);
		if(nbytes <= 0){
			if(errno = EINTR) nbytes = 0;
			else return(-1);
		}
		nleft -= nbytes;
		ptr += nbytes;
  	}
	return(n);
}

int write_to_worker(char *ip, void *buf, int n) {
	int fd,cc;
	char buf1[1024];
	int ret;
	cc = 0;
        timeval start_time,end;
        double lasttime;
        gettimeofday(&start_time, NULL);
      	while((fd = connect_worker(ip)) == -1){
           	cc ++;
           	std::cout<<"Connect to " << ip << " Fail!"<<std::endl;
		if(fd > 0) close(fd);
           	if(cc == 3) assert(false);
      	}
	ret = write_all(fd, buf, n);
	if(ret == -1){
		std::cout<<"send to "<<ip<<" fail!"<<std::endl;
		assert(false);
	} else {
		recv(fd, buf1, 1024,0);
        	gettimeofday(&end, NULL);
                lasttime = end.tv_sec - start_time.tv_sec + ((double)(end.tv_usec - start_time.tv_usec)) / 1.0E6;
                std::cout<<"send time:  "<<lasttime<<std::endl;
		close(fd);
	 	return(ret);
	}
}
